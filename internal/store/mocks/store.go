// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	proto "gophkeeper/pkg/proto"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the StorageInterface type
type MockStore struct {
	mock.Mock
}

// AddField provides a mock function with given fields: ctx, user, data
func (_m *MockStore) AddField(ctx context.Context, user string, data *proto.FieldKeep) (string, *proto.FieldKeep, bool) {
	ret := _m.Called(ctx, user, data)

	var r0 string
	var r1 *proto.FieldKeep
	var r2 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.FieldKeep) (string, *proto.FieldKeep, bool)); ok {
		return rf(ctx, user, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.FieldKeep) string); ok {
		r0 = rf(ctx, user, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *proto.FieldKeep) *proto.FieldKeep); ok {
		r1 = rf(ctx, user, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*proto.FieldKeep)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *proto.FieldKeep) bool); ok {
		r2 = rf(ctx, user, data)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// DelField provides a mock function with given fields: ctx, user, uuid
func (_m *MockStore) DelField(ctx context.Context, user string, uuid string) (string, bool) {
	ret := _m.Called(ctx, user, uuid)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, bool)); ok {
		return rf(ctx, user, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, user, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, user, uuid)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// EditField provides a mock function with given fields: ctx, user, uuid, data
func (_m *MockStore) EditField(ctx context.Context, user string, uuid string, data *proto.FieldKeep) (*proto.FieldKeep, bool) {
	ret := _m.Called(ctx, user, uuid, data)

	var r0 *proto.FieldKeep
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *proto.FieldKeep) (*proto.FieldKeep, bool)); ok {
		return rf(ctx, user, uuid, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *proto.FieldKeep) *proto.FieldKeep); ok {
		r0 = rf(ctx, user, uuid, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FieldKeep)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *proto.FieldKeep) bool); ok {
		r1 = rf(ctx, user, uuid, data)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ListFields provides a mock function with given fields: ctx, user
func (_m *MockStore) ListFields(ctx context.Context, user string) (*proto.ListFielsdKeepResponse, bool) {
	ret := _m.Called(ctx, user)

	var r0 *proto.ListFielsdKeepResponse
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.ListFielsdKeepResponse, bool)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.ListFielsdKeepResponse); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListFielsdKeepResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// UserLogin provides a mock function with given fields: ctx, login, password
func (_m *MockStore) UserLogin(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRegister provides a mock function with given fields: ctx, login, password
func (_m *MockStore) UserRegister(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
